from util import if_else

def test(actual, expected):
    actual = actual.reveal()
    if expected >= 2 ** (actual.n - 1) and actual.n != 1:
        expected -= 2 ** actual.n
    print_ln('expected %s, got %s', expected, actual)

def generate_continuous_list(n):
    """Generate a list of integers from 0 to n-1"""
    array = Array(n, sint)
    for i in range(n):
        array[i] = sint(i)
    return array

def generate_even_list(n):
    """Generate a list of even integers from 0 to n-1, filling the rest with 0"""
    array = Array(n, sint)
    for i in range(n):
        array[i] = if_else(i % 2 == 0, sint(i), sint(0))
    return array

def generate_odd_list(n):
    """Generate a list of odd integers from 0 to n-1, filling the rest with 0"""
    array = Array(n, sint)
    for i in range(n):
        array[i] = if_else(i % 2 == 1, sint(i), sint(0))
    return array

def list_intersection(a, b):
    n = len(a)
    intersection = Array(n, sint)
    
    # compare each element in a to elements in b
    for i in range(n):
        match = a[i] == b[i]
        #print_ln("a[%s] = %s, b[%s] = %s, match = %s", i, a[i].reveal(), i, b[i].reveal(), match.reveal())
        intersection[i] = if_else(match, a[i], sint(-1))
        #print_ln("intersection[%s] = %s", i, intersection[i].reveal())	

    return intersection

def list_intersection_cardinality(a, b):
    n = len(a)
    cardinality = sint(0)

    # compare each element in a to elements in b
    for i in range(n):
        match = a[i] == b[i]
        cardinality += match
    
    return cardinality
    
def threshold_intersection(a, b, t): # currently not working
    print_ln("threshold_intersection starts..")
    n = len(a)
    intersection = Array(n, sint)
    cardinality = sint(0)
    dummy = Array(n, sint).assign_all(sint(-1))
    result = Array(n, sint)

    # compare each element in a to elements in b
    for i in range(n):
        match = a[i] == b[i]
        intersection[i] = if_else(match, a[i], sint(-1))
        cardinality += match
    
    # print out the intersection only when the size is greater than t
    condition = cardinality > t
    for i in range(n):
        result[i] = if_else(condition, intersection[i], dummy[i])
    return result


def list_intersection_example(n, t):
    """Naive private list intersection on two Arrays, followed by computing the size and average of the intersection"""
    #a = Array(n, sint)
    #b = Array(n, sint)

    a = generate_continuous_list(n)
    b = generate_even_list(n)
    c = generate_odd_list(n)
    print_ln("lists are ready:")
    print_ln("a = %s", a.reveal())
    print_ln("b = %s", b.reveal())
    print_ln("c = %s\n", c.reveal())

    #computing intersection of a and b, followed by cardinality
    intersection = list_intersection(a, b)
    print_ln("intersection of a and b (elements that are not -1) = %s", intersection.reveal())
    cardinality = list_intersection_cardinality(a, b)
    print_ln("cardinality of intersection = %s\n", cardinality.reveal())

    #computing intersection of a and c, followed by cardinality
    intersection = list_intersection(a, c)
    print_ln("intersection of a and c (elements that are not -1) = %s", intersection.reveal())
    cardinality = list_intersection_cardinality(a, c)
    print_ln("cardinality of intersection = %s\n", cardinality.reveal())

    #computing intersection of b and c, followed by cardinality
    intersection = list_intersection(b, c)
    print_ln("intersection of b and c (elements that are not -1) = %s", intersection.reveal())
    cardinality = list_intersection_cardinality(b, c)
    print_ln("cardinality of intersection = %s\n", cardinality.reveal())

    #print_ln("\nprint out the intersection only when the size is greater than %s", t)
    result = threshold_intersection(a, b, t)
    print_ln("tPLI(a,b) result: %s", result.reveal())
    result = threshold_intersection(a, c, t)
    print_ln("tPLI(a,c) result: %s", result.reveal())
    result = threshold_intersection(b, c, t)
    print_ln("tPLI(b,c) result: %s\n", result.reveal())

list_intersection_example(30, 15)
